import React, { useState } from 'react';
import { Save, Filter, Calendar, RefreshCw, Search } from 'lucide-react';
import Card from '../components/ui/Card';
import Button from '../components/ui/Button';
import { Customer, DailyUpdate as DailyUpdateType } from '../types';
import { useApp } from '../context/AppContext';

const DailyUpdate: React.FC = () => {
  const { getCustomerTypeLabel } = useApp();
  const [selectedDate, setSelectedDate] = useState<string>(
    new Date().toISOString().split('T')[0]
  );
  const [filterType, setFilterType] = useState<string>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [updates, setUpdates] = useState<Record<string, { delivered: number; collected: number; notes: string }>>({});

  // Mock data - would come from API in real app
  const mockCustomers: Customer[] = [
    {
      customer_id: '1',
      name: 'Rajesh Kumar',
      phone_number: '9876543210',
      address: '123 Main Street, Mumbai',
      customer_type: 'shop',
      can_qty: 15,
      created_at: '2023-05-15T10:30:00Z'
    },
    {
      customer_id: '2',
      name: 'Ananya Singh',
      phone_number: '8765432109',
      address: '456 Park Avenue, Delhi',
      customer_type: 'monthly',
      advance_amount: 1000,
      can_qty: 5,
      created_at: '2023-06-20T09:15:00Z'
    },
    {
      customer_id: '3',
      name: 'Suresh Patel',
      phone_number: '7654321098',
      address: '789 Lake View, Ahmedabad',
      customer_type: 'order',
      created_at: '2023-07-10T14:45:00Z'
    },
    {
      customer_id: '4',
      name: 'Priya Sharma',
      phone_number: '6543210987',
      address: '101 Hill Road, Pune',
      customer_type: 'monthly',
      advance_amount: 1500,
      can_qty: 3,
      created_at: '2023-08-05T11:20:00Z'
    },
    {
      customer_id: '5',
      name: 'Vijay Mehta',
      phone_number: '5432109876',
      address: '202 Beach Road, Chennai',
      customer_type: 'shop',
      can_qty: 25,
      created_at: '2023-09-12T08:30:00Z'
    },
  ];

  const filteredCustomers = mockCustomers.filter(customer => {
    const matchesType = filterType === 'all' || customer.customer_type === filterType;
    const matchesSearch = customer.name.toLowerCase().includes(searchTerm.toLowerCase()) || 
                         customer.phone_number.includes(searchTerm);
    return matchesType && matchesSearch;
  });

  const handleUpdateChange = (customerId: string, field: 'delivered' | 'collected' | 'notes', value: string) => {
    setUpdates(prev => {
      const customerUpdates = prev[customerId] || { delivered: 0, collected: 0, notes: '' };
      
      if (field === 'notes') {
        return {
          ...prev,
          [customerId]: {
            ...customerUpdates,
            [field]: value
          }
        };
      } else {
        // For numeric fields
        const numValue = value === '' ? 0 : parseInt(value, 10);
        return {
          ...prev,
          [customerId]: {
            ...customerUpdates,
            [field]: isNaN(numValue) ? 0 : numValue
          }
        };
      }
    });
  };

  const handleSubmit = () => {
    // Here you would send the data to your API
    const updateData: DailyUpdateType[] = Object.entries(updates).map(([customerId, data]) => ({
      update_id: '', // Would be generated by the backend
      customer_id: customerId,
      date: selectedDate,
      delivered_qty: data.delivered,
      collected_qty: data.collected,
      notes: data.notes
    }));
    
    console.log('Submitting daily updates:', updateData);
    
    // Clear form after submission
    setUpdates({});
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Daily Can Update</h1>
        <p className="mt-1 text-sm text-gray-500">Track daily can deliveries and collections</p>
      </div>

      <Card>
        <div className="flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-4 mb-6">
          <div className="flex items-center">
            <Calendar className="h-5 w-5 text-gray-400 mr-2" />
            <input
              type="date"
              className="border-gray-300 rounded-md"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
            />
          </div>
          
          <div className="relative flex-1">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <Search className="h-5 w-5 text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Search by name or phone..."
              className="pl-10 pr-3 py-2 w-full border-gray-300 rounded-md"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          
          <div className="flex items-center">
            <Filter className="h-5 w-5 text-gray-400 mr-2" />
            <select
              className="border-gray-300 rounded-md"
              value={filterType}
              onChange={(e) => setFilterType(e.target.value)}
            >
              <option value="all">All Types</option>
              <option value="shop">Shop</option>
              <option value="monthly">Monthly</option>
              <option value="order">Order</option>
            </select>
          </div>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Customer
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Type
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Phone
                </th>
                <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <div className="flex items-center justify-center">
                    <span className="mr-1">Delivered</span>
                    <RefreshCw className="h-3 w-3 text-blue-500" />
                  </div>
                </th>
                <th scope="col" className="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                  <div className="flex items-center justify-center">
                    <span className="mr-1">Collected</span>
                    <RefreshCw className="h-3 w-3 text-green-500" />
                  </div>
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Notes
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredCustomers.map((customer) => (
                <tr key={customer.customer_id}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="font-medium text-gray-900">{customer.name}</div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="text-sm text-gray-700">
                      {getCustomerTypeLabel(customer.customer_type)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700">
                    {customer.phone_number}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    <input
                      type="number"
                      min="0"
                      className="w-16 border-gray-300 rounded-md text-center focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ring-1 ring-gray-300"
                      value={updates[customer.customer_id]?.delivered || ''}
                      onChange={(e) => handleUpdateChange(customer.customer_id, 'delivered', e.target.value)}
                    />
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-center">
                    <input
                      type="number"
                      min="0"
                      className="w-16 border-gray-300 rounded-md text-center focus:ring-2 focus:ring-blue-500 focus:border-blue-500 ring-1 ring-gray-300"
                      value={updates[customer.customer_id]?.collected || ''}
                      onChange={(e) => handleUpdateChange(customer.customer_id, 'collected', e.target.value)}
                    />
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <input
                      type="text"
                      placeholder="Optional"
                      className="w-full border-gray-300 rounded-md"
                      value={updates[customer.customer_id]?.notes || ''}
                      onChange={(e) => handleUpdateChange(customer.customer_id, 'notes', e.target.value)}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        {filteredCustomers.length === 0 && (
          <div className="text-center py-10">
            <p className="text-gray-500">No customers found matching the selected type.</p>
          </div>
        )}
        
        <div className="mt-6 flex justify-end">
          <Button 
            variant="primary"
            icon={<Save size={16} />}
            onClick={handleSubmit}
          >
            Save Updates
          </Button>
        </div>
      </Card>
    </div>
  );
};

export default DailyUpdate;